!pip install scikit-learn==1.6.0
!pip install matplotlib==3.9.3
!pip install seaborn==0.13.2


import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
import seaborn as sns
from sklearn.metrics import confusion_matrix



----------------- data ---------------


data = load_iris()
X, y = data.data, data.target
labels = data.target_names




------------------ create pipeline--------------------------------


pipeline = Pipeline([
    ('scaler', StandardScaler()),       # Step 1: Standardize features
    ('pca', PCA(n_components=2),),       # Step 2: Reduce dimensions to 2 using PCA for visual in 2d
    ('knn', KNeighborsClassifier(n_neighbors=5,))  # Step 3: K-Nearest Neighbors classifier k=5 
]) 


this is sequence



------------------------ test train first ----------------------

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)




---------------- then fit pipeline -----------------------------


pipeline.fit(X_train, y_train)

# Measure the pipeline accuracy on the test data
test_score = pipeline.score(X_test, y_test)
print(f"{test_score:.3f}")


now after splitting pipeline will separately do standard scalar etc


------------------ predict----------------------

y_pred = pipeline.predict(X_test)




------------------- draw confuion matrix ----------------------------------------

# generate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Create a plot for the confusion matrix
plt.figure()
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d',
            xticklabels=labels, yticklabels=labels)

# Set the title and labels
plt.title('Classification Pipeline Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')

# Show the plot
plt.tight_layout()
plt.show()


------------------------------ conclusion------------------


uptill this we created a pipeline to separate the standardization process , to reduce data leakage..
but we havent optimized hyerparameters yet
also runnig different value of k again and again make overfit(remember data , noise)
so now use cross validation GRIDCV



---------------------------------GRIDCV-----------------------------------------------------------------------------------------------------------------------------





---------------- make pipeline-----------------------------

# make a pipeline without specifying any parameters yet
pipeline = Pipeline(
                    [('scaler', StandardScaler()),
                     ('pca', PCA()),
                     ('knn', KNeighborsClassifier()) 
                    ]
                   )


-------------------- define grid---------------------------


# Hyperparameter search grid for numbers of PCA components and KNN neighbors
param_grid = {'pca__n_components': [2, 3],
              'knn__n_neighbors': [3, 5, 7]
             }



------------------- choose CV method-----------------------------

cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)









--------------------- create model--------------------


best_model = GridSearchCV(estimator=pipeline,
                          param_grid=param_grid,
                          cv=cv,
                          scoring='accuracy',
                          verbose=2
                         )


	//// This controls the amount of output you see while the search is running. A verbose level of 2 will provide a detailed log, showing you which hyperparameter combinations are being tested and the scores they are achieving.



------------------------------ fit--------------------------


best_model.fit(X_train, y_train)


/// cv divides test data into 5 folds




--------- evaluate score-----------

test_score = best_model.score(X_test, y_test)
print(f"{test_score:.3f}")



------------------ best hyperperemeters-----------------


best_model.best_params_


------------------ again confusion matrix now with best params auto -------------



y_pred = best_model.predict(X_test)

# Generate the confusion matrix for KNN
conf_matrix = confusion_matrix(y_test, y_pred)

# Create a single plot for the confusion matrix
plt.figure()
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d',
            xticklabels=labels, yticklabels=labels)

# Set the title and labels
plt.title('KNN Classification Testing Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')

# Show the plot
plt.tight_layout()
plt.show()














 





